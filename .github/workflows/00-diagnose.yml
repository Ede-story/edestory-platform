name: 00 Diagnose (WIF → Cloud Run dry-run → write log to repo)

on:
  push:
    branches: [ main ]
    paths: [ ".github/workflows/00-diagnose.yml" ]
  workflow_dispatch: {}

permissions:
  contents: write
  id-token: write

jobs:
  diag:
    runs-on: ubuntu-latest
    env:
      # берём vars из настроек репозитория
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      WIF_PROVIDER:   ${{ vars.WIF_PROVIDER }}
      GCP_SA_EMAIL:   ${{ vars.GCP_SA_EMAIL }}
      REGION:         europe-west1
      SERVICE:        diary-api-preview
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init log
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ops/diagnose
          LOG="ops/diagnose/last_run.log"
          echo "=== DIAG $(date -u +%FT%TZ) ==="           | tee "$LOG"
          echo "repo=$GITHUB_REPOSITORY sha=$GITHUB_SHA"   | tee -a "$LOG"
          echo "GCP_PROJECT_ID=${GCP_PROJECT_ID:-MISSING}" | tee -a "$LOG"
          echo "WIF_PROVIDER=${WIF_PROVIDER:-MISSING}"     | tee -a "$LOG"
          echo "GCP_SA_EMAIL=${GCP_SA_EMAIL:-MISSING}"     | tee -a "$LOG"
          echo "REGION=${REGION} SERVICE=${SERVICE}"       | tee -a "$LOG"
          echo "----------------------------------------"  | tee -a "$LOG"

      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Enable required APIs (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/diagnose/last_run.log"
          {
            gcloud config set project "${GCP_PROJECT_ID}" >/dev/null
            gcloud services enable run.googleapis.com cloudbuild.googleapis.com artifactregistry.googleapis.com secretmanager.googleapis.com --quiet
            echo "APIs OK"
          } 2>&1 | tee -a "$LOG"

      - name: Quick WIF + SA check
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/diagnose/last_run.log"
          {
            gcloud auth list
            gcloud iam service-accounts describe "${GCP_SA_EMAIL}" --format="value(email)" || true
          } 2>&1 | tee -a "$LOG"

      - name: Describe Cloud Run (best-effort)
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/diagnose/last_run.log"
          {
            echo "Describe ${SERVICE} in ${REGION} (may be absent)…"
            gcloud run services describe "${SERVICE}" --region "${REGION}" --format yaml || true
          } 2>&1 | tee -a "$LOG"

      - name: Dry-run deploy from source
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/diagnose/last_run.log"
          {
            echo "Dry-run deploy from apps/api…"
            gcloud run deploy "${SERVICE}" \
              --source apps/api \
              --region "${REGION}" \
              --allow-unauthenticated \
              --update-env-vars PORT=8080 \
              --set-secrets DIARY_TOKEN=projects/${GCP_PROJECT_ID}/secrets/preview-DIARY_TOKEN:latest \
              --set-secrets DATABASE_URL=projects/${GCP_PROJECT_ID}/secrets/preview-DATABASE_URL:latest \
              --dry-run=client
            echo "Dry-run OK (client-side validation passed)."
          } 2>&1 | tee -a "$LOG"

      # всегда записываем лог в репозиторий (без gh/pat — через git)
      - name: Commit and push log (always)
        if: always()
        shell: bash
        run: |
          set -e
          git config user.name  "edestory-orchestrator[bot]"
          git config user.email "edestory-orchestrator[bot]@users.noreply.github.com"
          cp ops/diagnose/last_run.log "ops/diagnose/run-${GITHUB_RUN_NUMBER}.log" || true
          git add ops/diagnose/last_run.log ops/diagnose/run-${GITHUB_RUN_NUMBER}.log || true
          git commit -m "ops(diagnose): save last_run.log (run ${GITHUB_RUN_NUMBER})" || true
          git push || true
          ops/diagnose/


