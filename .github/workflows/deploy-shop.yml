name: Deploy Shop to Google Cloud

on:
  push:
    branches:
      - main
    paths:
      - 'master-store/**'
      - '.github/workflows/deploy-shop.yml'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-west1
  SERVICE_NAME: edestory-shop
  
jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build and Push Frontend Image
        run: |
          cd master-store
          docker build \
            --cache-from gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            --build-arg NEXT_PUBLIC_SALEOR_API_URL=${{ secrets.SALEOR_API_URL }} \
            --build-arg NEXT_PUBLIC_STOREFRONT_URL=${{ secrets.STOREFRONT_URL }} \
            --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }} \
            .
          
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: Build and Push Saleor Image
        run: |
          cd master-store
          docker build \
            --cache-from gcr.io/${{ env.PROJECT_ID }}/saleor:latest \
            -t gcr.io/${{ env.PROJECT_ID }}/saleor:${{ github.sha }} \
            -t gcr.io/${{ env.PROJECT_ID }}/saleor:latest \
            -f Dockerfile.saleor \
            .
          
          docker push gcr.io/${{ env.PROJECT_ID }}/saleor:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/saleor:latest

      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --concurrency 100 \
            --max-instances 10 \
            --min-instances 1 \
            --allow-unauthenticated \
            --set-env-vars "NODE_ENV=production" \
            --set-secrets "STRIPE_SECRET_KEY=stripe-secret-key:latest,ALIEXPRESS_APP_KEY=aliexpress-app-key:latest,ALIEXPRESS_APP_SECRET=aliexpress-app-secret:latest"

      - name: Deploy Saleor API to Cloud Run
        run: |
          gcloud run deploy saleor-api \
            --image gcr.io/${{ env.PROJECT_ID }}/saleor:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --port 8000 \
            --memory 2Gi \
            --cpu 2 \
            --timeout 300 \
            --concurrency 100 \
            --max-instances 20 \
            --min-instances 2 \
            --allow-unauthenticated \
            --add-cloudsql-instances ${{ secrets.CLOUD_SQL_INSTANCE }} \
            --set-env-vars "NODE_ENV=production" \
            --set-secrets "DATABASE_URL=database-url:latest,SECRET_KEY=saleor-secret-key:latest"

      - name: Run Database Migrations
        run: |
          gcloud run jobs execute saleor-migrations \
            --region ${{ env.REGION }} \
            --wait

      - name: Get Service URLs
        run: |
          echo "Frontend URL:"
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)'
          
          echo "API URL:"
          gcloud run services describe saleor-api \
            --region ${{ env.REGION }} \
            --format 'value(status.url)'

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const frontendUrl = await exec.getExecOutput('gcloud', [
              'run', 'services', 'describe', '${{ env.SERVICE_NAME }}',
              '--region', '${{ env.REGION }}',
              '--format', 'value(status.url)'
            ]);
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Deployed to Google Cloud Run!\n\nFrontend: ${frontendUrl.stdout}\n\nCommit: ${context.sha}`
            })

  test:
    name: Test Deployment
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd master-store/frontend
          pnpm install

      - name: Run E2E tests
        run: |
          cd master-store/frontend
          pnpm test:e2e:prod
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.STOREFRONT_URL }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: master-store/frontend/playwright-report/