.github/workflows/bootstrap-supervisor.yml
name: Bootstrap Supervisor via PAT
on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Target branch for supervisor workflow"
        default: "chore/ci-supervisor"
        required: true
      pr_number:
        description: "Diary PR number"
        default: "3"
        required: true

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git author
        run: |
          git config user.name "edestory-bot"
          git config user.email "bot@users.noreply.github.com"

      - name: Create branch and add supervisor workflow
        env:
          GH_PAT: ${{ secrets.AGENT_PAT }}
        run: |
          BR="${{ github.event.inputs.branch }}"
          git checkout -B "$BR"
          mkdir -p .github/workflows
          cat > .github/workflows/ci-supervisor.yml <<'YAML'
name: CI Supervisor (auto Cloud Run → Vercel → Checks → Merge)
on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Target PR number (e.g., 3)"
        default: "3"
        required: true
permissions:
  contents: write
  actions: write
  pull-requests: write
  id-token: write
concurrency:
  group: "ci-supervisor"
  cancel-in-progress: true
env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: europe-west1
  SERVICE_NAME: diary-api-preview
  VERCEL_PROJECT: ${{ vars.VERCEL_PROJECT }}
  VERCEL_TEAM_ID: ${{ vars.VERCEL_TEAM_ID }}
jobs:
  supervise:
    if: ${{ github.event_name == 'workflow_dispatch' || vars.SUPERVISOR_CRON_ENABLED == '1' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Resolve PR number
        id: pr
        run: echo "num=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
      - name: App token
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          installation-id: ${{ vars.GH_INSTALLATION_ID }}
      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.GCP_SA_EMAIL }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      - name: Ensure Artifact Registry
        run: |
          gcloud artifacts repositories describe diary-registry --location=${{ env.REGION }} >/dev/null 2>&1 || \
            gcloud artifacts repositories create diary-registry --repository-format=DOCKER --location=${{ env.REGION }}
      - name: Build & Push (Cloud Build)
        run: |
          IMAGE="europe-west1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/diary-registry/diary-api:pr-${{ steps.pr.outputs.num }}-${{ github.run_number }}"
          gcloud builds submit apps/api --tag "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - name: Deploy to Cloud Run (preview)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image "$IMAGE" \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-secrets DIARY_TOKEN=preview-DIARY_TOKEN:latest,DATABASE_URL=preview-DATABASE_URL:latest
      - name: Capture CLOUD_RUN_URL
        id: cr
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "$URL" > cloud_run_url.txt
      - uses: actions/upload-artifact@v4
        with:
          name: cloud_run_url
          path: cloud_run_url.txt
      - name: Update Vercel env (preview)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ env.VERCEL_PROJECT }}
          VERCEL_TEAM_ID: ${{ env.VERCEL_TEAM_ID }}
          API_URL: ${{ steps.cr.outputs.url }}
        run: |
          BASE="https://api.vercel.com"
          TEAM_QS=""
          if [ -n "$VERCEL_TEAM_ID" ]; then TEAM_QS="?teamId=$VERCEL_TEAM_ID"; fi
          curl -fsS -X POST "$BASE/v10/projects/${VERCEL_PROJECT}/env$TEAM_QS" \
            -H "Authorization: Bearer $VERCEL_TOKEN" -H "Content-Type: application/json" \
            -d "{\"key\":\"NEXT_PUBLIC_API_BASE_URL\",\"value\":\"$API_URL\",\"type\":\"plain\",\"target\":[\"preview\"],\"overwrite\":true}" \
            || echo "Env create/overwrite may already exist"
          REF="refs/pull/${{ steps.pr.outputs.num }}/head"
          curl -fsS -X POST "$BASE/v13/deployments$TEAM_QS" \
            -H "Authorization: Bearer $VERCEL_TOKEN" -H "Content-Type: application/json" \
            -d "{\"name\":\"$VERCEL_PROJECT\",\"gitSource\":{\"org\":\"Ede-story\",\"repo\":\"edestory-platform\",\"ref\":\"${REF}\"}}" \
            | tee vercel_deploy.json || true
      - name: Discover preview URL
        id: pv
        run: |
          PREVIEW=""
          if [ -f vercel_deploy.json ]; then PREVIEW=$(jq -r '.url // empty' vercel_deploy.json); fi
          if [ -n "$PREVIEW" ]; then echo "url=https://$PREVIEW" >> $GITHUB_OUTPUT; fi
      - name: Install Node & LHCI
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm i -g @lhci/cli
      - name: Lighthouse
        if: steps.pv.outputs.url != ''
        run: |
          lhci collect --url="${{ steps.pv.outputs.url }}/" --url="${{ steps.pv.outputs.url }}/diary" --numberOfRuns=1
          lhci assert --assertions.performance=0.9 --assertions.accessibility=0.9 --assertions.seo=0.9 --assertions.best-practices=0.9
      - uses: actions/upload-artifact@v4
        if: steps.pv.outputs.url != ''
        with:
          name: lhci
          path: .lighthouseci/*
      - name: Open PR (if needed)
        env:
          GH_TOKEN: ${{ secrets.AGENT_PAT }}
        run: |
          TITLE="CI Supervisor: full auto (Cloud Run ⇄ Vercel ⇄ Checks ⇄ Auto-merge)"
          BODY="Adds supervisor workflow; parametrized by inputs.pr_number; cron via SUPERVISOR_CRON_ENABLED."
          gh pr view "${{ github.event.inputs.branch }}" --head || gh pr create --base main --head "${{ github.event.inputs.branch }}" --title "$TITLE" --body "$BODY" || true
YAML
          git add .github/workflows/ci-supervisor.yml
          git commit -m "ci(supervisor): add CI supervisor workflow" || true
          git push -u "https://x-access-token:${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git" "$BR"
