name: EDEstory Converge (diagnose → Cloud Run → save URL/log)

on:
  push:
    branches: [ main ]
    paths: [ ".github/workflows/edestory-converge.yml" ]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  issues: write
  id-token: write

jobs:
  converge:
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GH_PAT }}   # если PAT не используешь, можно убрать
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start log & trap
        id: trap
        shell: bash
        run: |
          set -euo pipefail
          LOG=ops/supervisor/last_run.log
          mkdir -p ops/supervisor
          echo "=== EDEstory Converge $(date -u +%FT%TZ) ===" | tee "$LOG"
          echo "repo=$GITHUB_REPOSITORY sha=$GITHUB_SHA" | tee -a "$LOG"
          # trap: при выходе пишем лог и попытку upsert в репозиторий
          cat > push_log.sh <<'PUSH'
          #!/usr/bin/env bash
          set -euo pipefail
          # упаковать и записать логи/артефакты в репозиторий через GitHub API
          sha=$(gh api repos/${GITHUB_REPOSITORY}/contents/ops/supervisor/last_run.log --jq .sha 2>/dev/null || echo "")
          content=$(base64 ops/supervisor/last_run.log | tr -d '\n')
          if [ -n "$sha" ]; then
            gh api -X PUT repos/${GITHUB_REPOSITORY}/contents/ops/supervisor/last_run.log -f message="ops(supervisor): update last_run.log" -f content="$content" -f sha="$sha" -f branch="${GITHUB_REF_NAME}"
          else
            gh api -X PUT repos/${GITHUB_REPOSITORY}/contents/ops/supervisor/last_run.log -f message="ops(supervisor): add last_run.log" -f content="$content" -f branch="${GITHUB_REF_NAME}"
          fi
          # если есть cloud_run_url.txt — аплоадим тоже
          if [ -f ops/supervisor/cloud_run_url.txt ]; then
            sha2=$(gh api repos/${GITHUB_REPOSITORY}/contents/ops/supervisor/cloud_run_url.txt --jq .sha 2>/dev/null || echo "")
            content2=$(base64 ops/supervisor/cloud_run_url.txt | tr -d '\n')
            if [ -n "$sha2" ]; then
              gh api -X PUT repos/${GITHUB_REPOSITORY}/contents/ops/supervisor/cloud_run_url.txt -f message="ops(supervisor): update cloud_run_url" -f content="$content2" -f sha="$sha2" -f branch="${GITHUB_REF_NAME}"
            else
              gh api -X PUT repos/${GITHUB_REPOSITORY}/contents/ops/supervisor/cloud_run_url.txt -f message="ops(supervisor): add cloud_run_url" -f content="$content2" -f branch="${GITHUB_REF_NAME}"
            fi
          fi
          PUSH
          chmod +x push_log.sh

      - name: Create GH token (PAT or fallback to GITHUB_TOKEN)
        id: authgh
        shell: bash
        run: |
          if [ -n "${GH_PAT:-}" ]; then
            echo "token=$GH_PAT" >> $GITHUB_OUTPUT
            echo "Using GH_PAT"
          else
            echo "token=$GITHUB_TOKEN" >> $GITHUB_OUTPUT
            echo "Using default GITHUB_TOKEN"
          fi

      - name: Write preflight to log
        env:
          GH_TOKEN: ${{ steps.authgh.outputs.token }}
        shell: bash
        run: |
          set -euo pipefail
          LOG=ops/supervisor/last_run.log
          {
            echo "GH_APP_ID=${{ vars.GH_APP_ID:-MISSING }}"
            echo "GH_INSTALLATION_ID=${{ vars.GH_INSTALLATION_ID:-MISSING }}"
            echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID:-MISSING }}"
            echo "WIF_PROVIDER=${{ vars.WIF_PROVIDER:-MISSING }}"
            echo "GCP_SA_EMAIL=${{ vars.GCP_SA_EMAIL:-MISSING }}"
          } | tee -a "$LOG"

      - name: Enable GCP APIs (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          LOG=ops/supervisor/last_run.log
          {
            echo "Enabling GCP APIs…"
            gcloud config set project "${{ vars.GCP_PROJECT_ID }}" >/dev/null
            gcloud services enable run.googleapis.com cloudbuild.googleapis.com artifactregistry.googleapis.com secretmanager.googleapis.com --quiet
            echo "APIs enabled."
          } | tee -a "$LOG"

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.GCP_SA_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Verify secrets exist (idempotent check)
        shell: bash
        run: |
          set -euo pipefail
          LOG=ops/supervisor/last_run.log
          {
            echo "Checking Secret Manager versions…"
            gcloud secrets describe preview-DIARY_TOKEN >/dev/null 2>&1 && echo "preview-DIARY_TOKEN: OK" || echo "preview-DIARY_TOKEN: MISSING"
            gcloud secrets describe preview-DATABASE_URL >/dev/null 2>&1 && echo "preview-DATABASE_URL: OK" || echo "preview-DATABASE_URL: MISSING"
          } | tee -a "$LOG"

      - name: Deploy Cloud Run (apps/api)
        shell: bash
        run: |
          set -euo pipefail
          LOG=ops/supervisor/last_run.log
          {
            echo "Deploying Cloud Run…"
            REGION="europe-west1"
            SERVICE="diary-api-preview"
            gcloud config set project "${{ vars.GCP_PROJECT_ID }}" >/dev/null
            gcloud config set run/region "$REGION" >/dev/null
            gcloud run deploy "$SERVICE" \
              --source apps/api \
              --allow-unauthenticated \
              --quiet \
              --update-env-vars PORT=8080 \
              --set-secrets DIARY_TOKEN=projects/${{ vars.GCP_PROJECT_ID }}/secrets/preview-DIARY_TOKEN:latest \
              --set-secrets DATABASE_URL=projects/${{ vars.GCP_PROJECT_ID }}/secrets/preview-DATABASE_URL:latest
            URL="$(gcloud run services describe "$SERVICE" --format='value(status.url)')"
            echo "$URL" | tee cloud_run_url.txt
            echo "$URL" > ops/supervisor/cloud_run_url.txt
            printf '{"cloud_run_url":"%s","ts":"%s"}\n' "$URL" "$(date -u +%FT%TZ)" > ops/supervisor/last_run.json
            echo "Cloud Run URL: $URL"
          } | tee -a "$LOG"

      - name: Push log & outputs to repo (always)
        if: always()
        env:
          GH_TOKEN: ${{ steps.authgh.outputs.token }}
        shell: bash
        run: |
          set -euo pipefail
          ./push_log.sh

      - name: Comment URL in PR #9 (best-effort)
        if: always()
        env:
          GH_TOKEN: ${{ steps.authgh.outputs.token }}
        run: |
          if [ -f ops/supervisor/cloud_run_url.txt ]; then
            URL="$(cat ops/supervisor/cloud_run_url.txt)"
            gh api repos/${{ github.repository }}/issues/9/comments -f body="✅ Cloud Run URL: ${URL}\n(лог: ops/supervisor/last_run.log)" || true
          else
            gh api repos/${{ github.repository }}/issues/9/comments -f body="❌ Deploy failed. См. ops/supervisor/last_run.log" || true
          fi

