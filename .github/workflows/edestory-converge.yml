name: EDEstory Converge (Cloud Run → write URL into repo)

on:
  push:
    branches: [ main ]
    paths: [ ".github/workflows/edestory-converge.yml" ]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  issues: write
  id-token: write

jobs:
  converge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub App token
        id: app
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          installation-id: ${{ vars.GH_INSTALLATION_ID }}

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.GCP_SA_EMAIL }}
          create_credentials_file: true

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 453.0.0"

      - name: Deploy Cloud Run (apps/api)
        env:
          PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
        working-directory: apps/api
        run: |
          set -euxo pipefail
          REGION="europe-west1"
          SERVICE="diary-api-preview"

          gcloud config set project "$PROJECT_ID"
          gcloud config set run/region "$REGION"

          gcloud run deploy "$SERVICE" \
            --source . \
            --allow-unauthenticated \
            --quiet \
            --update-env-vars "PORT=8080" \
            --set-secrets "DIARY_TOKEN=projects/${PROJECT_ID}/secrets/preview-DIARY_TOKEN:latest" \
            --set-secrets "DATABASE_URL=projects/${PROJECT_ID}/secrets/preview-DATABASE_URL:latest"

          URL="$(gcloud run services describe "$SERVICE" --format='value(status.url)')"
          echo "$URL" > "$GITHUB_WORKSPACE/cloud_run_url.txt"

      - name: Write outputs into repo (commit via API)
        env:
          GH_TOKEN: ${{ steps.app.outputs.token }}
        run: |
          set -e
          mkdir -p ops/supervisor
          cp "$GITHUB_WORKSPACE/cloud_run_url.txt" ops/supervisor/cloud_run_url.txt
          printf '{"cloud_run_url":"%s","ts":"%s"}\n' "$(cat ops/supervisor/cloud_run_url.txt)" "$(date -u +%FT%TZ)" > ops/supervisor/last_run.json

          # upsert files via GitHub API (works even if Actions UI is flaky)
          upsert() {
            local path="$1"
            local msg="$2"
            local sha=""
            sha=$(gh api repos/${{ github.repository }}/contents/$path --jq .sha 2>/dev/null || echo "")
            content=$(base64 -w0 "$path" 2>/dev/null || base64 "$path")
            if [ -n "$sha" ]; then
              gh api -X PUT repos/${{ github.repository }}/contents/$path \
                -f message="$msg" -f content="$content" -f sha="$sha" -f branch="${{ github.ref_name }}"
            else
              gh api -X PUT repos/${{ github.repository }}/contents/$path \
                -f message="$msg" -f content="$content" -f branch="${{ github.ref_name }}"
            fi
          }
          upsert "ops/supervisor/cloud_run_url.txt" "ops(supervisor): write cloud_run_url"
          upsert "ops/supervisor/last_run.json" "ops(supervisor): write last_run json"

      - name: Update Vercel env (optional)
        if: ${{ secrets.VERCEL_TOKEN != '' && vars.VERCEL_PROJECT != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ vars.VERCEL_PROJECT }}
          VERCEL_TEAM_ID: ${{ vars.VERCEL_TEAM_ID }}
        run: |
          set -e
          URL="$(cat $GITHUB_WORKSPACE/cloud_run_url.txt)"
          API="https://api.vercel.com/v10/projects/${VERCEL_PROJECT}/env"
          TEAM="${VERCEL_TEAM_ID:+?teamId=${VERCEL_TEAM_ID}}"
          body=$(jq -c --arg url "$URL" '{key:"NEXT_PUBLIC_API_BASE_URL", value:$url, target:["preview"]}')
          curl -fsS -X POST "${API}${TEAM}" -H "Authorization: Bearer ${VERCEL_TOKEN}" -H "Content-Type: application/json" -d "$body" || true

      - name: Comment Cloud Run URL to PR #9 (best-effort)
        env:
          GH_TOKEN: ${{ steps.app.outputs.token }}
        run: |
          set -e
          URL="$(cat $GITHUB_WORKSPACE/cloud_run_url.txt)"
          gh api repos/${{ github.repository }}/issues/9/comments \
            -f body="✅ Cloud Run URL: ${URL}\nSaved at ops/supervisor/cloud_run_url.txt" || true

