name: EDEstory Converge (diagnose → Cloud Run → save URL/log)

on:
  push:
    branches: [ main ]
    paths: [ ".github/workflows/edestory-converge.yml" ]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  issues: write
  id-token: write

jobs:
  converge:
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GH_PAT }}                   # classic PAT (scopes: repo, workflow)
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      WIF_PROVIDER:   ${{ vars.WIF_PROVIDER }}
      GCP_SA_EMAIL:   ${{ vars.GCP_SA_EMAIL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init log & trap (always upload log)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ops/supervisor
          LOG="ops/supervisor/last_run.log"
          echo "=== EDEstory Converge $(date -u +%FT%TZ) ===" | tee "$LOG"
          echo "repo=$GITHUB_REPOSITORY sha=$GITHUB_SHA" | tee -a "$LOG"
          cat > push_log.sh <<'PUSH'
          #!/usr/bin/env bash
          set -euo pipefail
          GH_TOKEN="${GH_PAT:-$GITHUB_TOKEN}"
          upsert () {
            local path="$1"; local msg="$2"
            local sha; sha=$(gh api repos/${GITHUB_REPOSITORY}/contents/$path --jq .sha 2>/dev/null || echo "")
            local content; content=$(base64 "$path" | tr -d '\n')
            if [ -n "${sha}" ]; then
              gh api -X PUT repos/${GITHUB_REPOSITORY}/contents/$path -f message="$msg" -f content="$content" -f sha="$sha" -f branch="${GITHUB_REF_NAME}"
            else
              gh api -X PUT repos/${GITHUB_REPOSITORY}/contents/$path -f message="$msg" -f content="$content" -f branch="${GITHUB_REF_NAME}"
            fi
          }
          export GH_TOKEN
          upsert "ops/supervisor/last_run.log" "ops(converge): write last_run.log"
          [ -f ops/supervisor/cloud_run_url.txt ] && upsert "ops/supervisor/cloud_run_url.txt" "ops(converge): write cloud_run_url" || true
          PUSH
          chmod +x push_log.sh

      - name: Preflight (vars + PAT)
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/supervisor/last_run.log"
          {
            echo "GCP_PROJECT_ID=${GCP_PROJECT_ID:-MISSING}"
            echo "WIF_PROVIDER=${WIF_PROVIDER:-MISSING}"
            echo "GCP_SA_EMAIL=${GCP_SA_EMAIL:-MISSING}"
            if [ -n "${GH_PAT:-}" ]; then echo "GH_PAT=SET"; else echo "GH_PAT=NOT_SET (fallback to GITHUB_TOKEN)"; fi
          } | tee -a "$LOG"

      - name: Enable GCP APIs
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/supervisor/last_run.log"
          {
            gcloud config set project "${GCP_PROJECT_ID}" >/dev/null
            gcloud services enable run.googleapis.com cloudbuild.googleapis.com artifactregistry.googleapis.com secretmanager.googleapis.com --quiet
            echo "GCP APIs enabled."
          } | tee -a "$LOG"

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Ensure secrets exist (report only)
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/supervisor/last_run.log"
          {
            gcloud secrets describe preview-DIARY_TOKEN >/dev/null 2>&1 && echo "preview-DIARY_TOKEN: OK" || echo "preview-DIARY_TOKEN: MISSING"
            gcloud secrets describe preview-DATABASE_URL >/dev/null 2>&1 && echo "preview-DATABASE_URL: OK" || echo "preview-DATABASE_URL: MISSING"
          } | tee -a "$LOG"

      - name: Deploy Cloud Run (apps/api)
        shell: bash
        run: |
          set -euo pipefail
          LOG="ops/supervisor/last_run.log"
          {
            REGION="europe-west1"
            SERVICE="diary-api-preview"
            gcloud config set project "${GCP_PROJECT_ID}" >/dev/null
            gcloud config set run/region "$REGION" >/dev/null
            gcloud run deploy "$SERVICE" \
              --source apps/api \
              --allow-unauthenticated \
              --quiet \
              --update-env-vars PORT=8080 \
              --set-secrets DIARY_TOKEN=projects/${GCP_PROJECT_ID}/secrets/preview-DIARY_TOKEN:latest \
              --set-secrets DATABASE_URL=projects/${GCP_PROJECT_ID}/secrets/preview-DATABASE_URL:latest
            URL="$(gcloud run services describe "$SERVICE" --format='value(status.url)')"
            echo "$URL" | tee cloud_run_url.txt
            echo "$URL" > ops/supervisor/cloud_run_url.txt
            printf '{"cloud_run_url":"%s","ts":"%s"}\n' "$URL" "$(date -u +%FT%TZ)" > ops/supervisor/last_run.json
            echo "Cloud Run URL: $URL"
          } | tee -a "$LOG"

      - name: Always push log & outputs
        if: always()
        env:
          GH_PAT: ${{ env.GH_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          GH_TOKEN="${GH_PAT:-$GITHUB_TOKEN}" ./push_log.sh

      - name: Comment summary to PR #9 (best-effort)
        if: always()
        env:
          GH_PAT: ${{ env.GH_PAT }}
        run: |
          GH_TOKEN="${GH_PAT:-$GITHUB_TOKEN}"
          if [ -f ops/supervisor/cloud_run_url.txt ]; then
            URL="$(cat ops/supervisor/cloud_run_url.txt)"
            gh api repos/${{ github.repository }}/issues/9/comments -f body="✅ Cloud Run URL: ${URL}\nЛоги: ops/supervisor/last_run.log" || true
          else
            gh api repos/${{ github.repository }}/issues/9/comments -f body="❌ Deploy failed. См. ops/supervisor/last_run.log" || true
          fi
          # kick




