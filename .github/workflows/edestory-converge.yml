name: EDEstory Converge (Preflight → Cloud Run → Save URL) — PAT

on:
  push:
    branches: [ main ]
    paths: [ ".github/workflows/edestory-converge.yml" ]
  workflow_dispatch: {}

# GitHub permissions для GITHUB_TOKEN (нам не критично, используем GH_PAT)
permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write
  issues: write
  id-token: write

jobs:
  converge:
    runs-on: ubuntu-latest
    env:
      # PAT будем подавать через GH_TOKEN в тех шагах, где нужен доступ к GitHub API
      GH_PAT: ${{ secrets.GH_PAT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # PREFLIGHT: убеждаемся, что PAT есть
      - name: Preflight – check GH_PAT presence
        run: |
          if [ -z "${GH_PAT}" ]; then
            echo "::error::Missing GH_PAT secret. Create classic PAT with scopes: repo, workflow and save as GH_PAT."
            exit 1
          fi
          echo "GH_PAT is set."

      # Smoke: используем PAT, чтобы написать комментарий в PR #9 (доказывает, что записывать в GH можем)
      - name: Smoke – comment PR #9 via PAT
        env:
          GH_TOKEN: ${{ env.GH_PAT }}
        run: |
          gh api repos/${{ github.repository }}/issues/9/comments \
            -f body="✅ PAT OK (preflight). Proceeding to deploy…" || exit 1

      # GCP AUTH (WIF) + gcloud — это как раньше
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.GCP_SA_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      # DEPLOY Cloud Run из apps/api (Cloud Build соберёт образ)
      - name: Deploy Cloud Run (apps/api)
        env:
          PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
        run: |
          set -euxo pipefail
          REGION="europe-west1"
          SERVICE="diary-api-preview"

          gcloud config set project "$PROJECT_ID"
          gcloud config set run/region "$REGION"

          gcloud run deploy "$SERVICE" \
            --source apps/api \
            --allow-unauthenticated \
            --quiet \
            --update-env-vars PORT=8080 \
            --set-secrets DIARY_TOKEN=projects/${PROJECT_ID}/secrets/preview-DIARY_TOKEN:latest \
            --set-secrets DATABASE_URL=projects/${PROJECT_ID}/secrets/preview-DATABASE_URL:latest

          URL="$(gcloud run services describe "$SERVICE" --format='value(status.url)')"
          echo "$URL" > cloud_run_url.txt

      # Сохраняем результат в репозиторий: создаём/обновляем файлы через GitHub API с GH_PAT
      - name: Write outputs into repo (commit via API using PAT)
        env:
          GH_TOKEN: ${{ env.GH_PAT }}
        shell: bash
        run: |
          set -e
          mkdir -p ops/supervisor
          cp cloud_run_url.txt ops/supervisor/cloud_run_url.txt
          printf '{"cloud_run_url":"%s","ts":"%s"}\n' "$(cat ops/supervisor/cloud_run_url.txt)" "$(date -u +%FT%TZ)" > ops/supervisor/last_run.json

          upsert () {
            local path="$1"
            local msg="$2"
            local sha
            sha=$(gh api repos/${{ github.repository }}/contents/$path --jq .sha 2>/dev/null || echo "")
            content=$(base64 "$path" | tr -d '\n')
            if [ -n "$sha" ]; then
              gh api -X PUT repos/${{ github.repository }}/contents/$path \
                -f message="$msg" -f content="$content" -f sha="$sha" -f branch="${{ github.ref_name }}"
            else
              gh api -X PUT repos/${{ github.repository }}/contents/$path \
                -f message="$msg" -f content="$content" -f branch="${{ github.ref_name }}"
            fi
          }

          upsert "ops/supervisor/cloud_run_url.txt" "ops(supervisor): write cloud_run_url"
          upsert "ops/supervisor/last_run.json"     "ops(supervisor): write last_run json"

      # (Опционально) обновим Vercel env; проверим наличие токена/проекта внутри bash
      - name: Update Vercel env (optional)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT: ${{ vars.VERCEL_PROJECT }}
          VERCEL_TEAM_ID: ${{ vars.VERCEL_TEAM_ID }}
        run: |
          set -e
          if [ -n "${VERCEL_TOKEN}" ] && [ -n "${VERCEL_PROJECT}" ]; then
            URL="$(cat cloud_run_url.txt)"
            API="https://api.vercel.com/v10/projects/${VERCEL_PROJECT}/env"
            TEAM="${VERCEL_TEAM_ID:+?teamId=${VERCEL_TEAM_ID}}"
            body="{\"key\":\"NEXT_PUBLIC_API_BASE_URL\",\"value\":\"${URL}\",\"target\":[\"preview\"]}"
            curl -fsS -X POST "${API}${TEAM}" \
              -H "Authorization: Bearer ${VERCEL_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "$body" || true
            echo "Vercel env update attempted."
          else
            echo "Skip Vercel: VERCEL_TOKEN or VERCEL_PROJECT not set."
          fi

      # Финальный комментарий с адресом Cloud Run (best-effort)
      - name: Comment Cloud Run URL to PR #9
        env:
          GH_TOKEN: ${{ env.GH_PAT }}
        run: |
          URL="$(cat cloud_run_url.txt)"
          gh api repos/${{ github.repository }}/issues/9/comments \
            -f body="Cloud Run URL: ${URL}\nSaved at ops/supervisor/cloud_run_url.txt" || true
            # kick

