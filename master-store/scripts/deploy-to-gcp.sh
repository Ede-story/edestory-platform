#!/bin/bash

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π Edestory Shop –Ω–∞ Google Cloud Platform
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}    üöÄ Edestory Shop - Google Cloud Deployment${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ prerequisites
check_prerequisites() {
    echo -e "${YELLOW}üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...${NC}"
    
    # Check gcloud
    if ! command -v gcloud &> /dev/null; then
        echo -e "${RED}‚ùå gcloud CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
    
    # Check terraform
    if ! command -v terraform &> /dev/null; then
        echo -e "${RED}‚ùå Terraform –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å: brew install terraform"
        exit 1
    fi
    
    # Check docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        exit 1
    fi
    
    # Check project
    PROJECT_ID=$(gcloud config get-value project)
    if [ -z "$PROJECT_ID" ]; then
        echo -e "${RED}‚ùå GCP –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã${NC}"
    echo -e "${YELLOW}üì¶ –ü—Ä–æ–µ–∫—Ç: $PROJECT_ID${NC}\n"
}

# Step 1: Terraform Infrastructure
deploy_infrastructure() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚ïê‚ïê‚ïê${NC}\n"
    
    cd terraform
    
    # Initialize Terraform
    echo -e "${YELLOW}–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Terraform...${NC}"
    terraform init
    
    # Plan changes
    echo -e "${YELLOW}–ü–ª–∞–Ω–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...${NC}"
    terraform plan -out=tfplan
    
    # Apply changes
    echo -e "${YELLOW}–ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...${NC}"
    terraform apply tfplan
    
    # Save outputs
    terraform output -json > ../terraform-outputs.json
    
    cd ..
    echo -e "${GREEN}‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞${NC}\n"
}

# Step 2: Build Docker Images
build_images() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ ‚ïê‚ïê‚ïê${NC}\n"
    
    # Build frontend image
    echo -e "${YELLOW}–°–æ–±–∏—Ä–∞–µ–º frontend –æ–±—Ä–∞–∑...${NC}"
    docker build -t gcr.io/$PROJECT_ID/edestory-shop:latest \
        --build-arg NEXT_PUBLIC_SALEOR_API_URL=https://api.shop.ede-story.com/graphql/ \
        --build-arg NEXT_PUBLIC_STOREFRONT_URL=https://shop.ede-story.com \
        .
    
    # Push to registry
    echo -e "${YELLOW}–ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Container Registry...${NC}"
    docker push gcr.io/$PROJECT_ID/edestory-shop:latest
    
    echo -e "${GREEN}‚úÖ –û–±—Ä–∞–∑—ã –≥–æ—Ç–æ–≤—ã${NC}\n"
}

# Step 3: Deploy Saleor
deploy_saleor() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 3: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Saleor ‚ïê‚ïê‚ïê${NC}\n"
    
    # Build Saleor image
    echo -e "${YELLOW}–°–æ–±–∏—Ä–∞–µ–º Saleor –æ–±—Ä–∞–∑...${NC}"
    docker build -t gcr.io/$PROJECT_ID/saleor:latest -f Dockerfile.saleor .
    docker push gcr.io/$PROJECT_ID/saleor:latest
    
    # Deploy to Cloud Run
    echo -e "${YELLOW}–î–µ–ø–ª–æ–∏–º Saleor API...${NC}"
    gcloud run deploy saleor-api \
        --image gcr.io/$PROJECT_ID/saleor:latest \
        --region europe-west1 \
        --platform managed \
        --memory 2Gi \
        --cpu 2 \
        --timeout 300 \
        --concurrency 100 \
        --port 8000 \
        --max-instances 20 \
        --min-instances 2 \
        --allow-unauthenticated \
        --add-cloudsql-instances $(terraform output -raw database_instance)
    
    echo -e "${GREEN}‚úÖ Saleor API —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç${NC}\n"
}

# Step 4: Deploy Frontend
deploy_frontend() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 4: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Frontend ‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${YELLOW}–î–µ–ø–ª–æ–∏–º Frontend...${NC}"
    gcloud run deploy edestory-shop \
        --image gcr.io/$PROJECT_ID/edestory-shop:latest \
        --region europe-west1 \
        --platform managed \
        --memory 1Gi \
        --cpu 1 \
        --timeout 300 \
        --concurrency 100 \
        --port 8080 \
        --max-instances 10 \
        --min-instances 1 \
        --allow-unauthenticated
    
    echo -e "${GREEN}‚úÖ Frontend —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç${NC}\n"
}

# Step 5: Setup n8n
setup_n8n() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ n8n –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${YELLOW}–î–µ–ø–ª–æ–∏–º n8n...${NC}"
    gcloud run deploy n8n \
        --image n8nio/n8n:latest \
        --region europe-west1 \
        --platform managed \
        --memory 1Gi \
        --cpu 1 \
        --port 5678 \
        --max-instances 3 \
        --min-instances 1 \
        --set-env-vars N8N_BASIC_AUTH_ACTIVE=true,N8N_BASIC_AUTH_USER=admin,N8N_BASIC_AUTH_PASSWORD=changeme
    
    echo -e "${GREEN}‚úÖ n8n –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}\n"
}

# Step 6: Configure domain
configure_domain() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞ ‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–º–µ–Ω shop.ede-story.com...${NC}"
    
    # Get service URL
    SERVICE_URL=$(gcloud run services describe edestory-shop --region europe-west1 --format 'value(status.url)')
    
    echo -e "${GREEN}Service URL: $SERVICE_URL${NC}"
    echo -e "${YELLOW}–î–æ–±–∞–≤—å—Ç–µ CNAME –∑–∞–ø–∏—Å—å –≤ DNS:${NC}"
    echo -e "  Type: CNAME"
    echo -e "  Name: shop"
    echo -e "  Value: ${SERVICE_URL#https://}"
    
    echo -e "${GREEN}‚úÖ –î–æ–º–µ–Ω –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ${NC}\n"
}

# Step 7: Run migrations
run_migrations() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 7: –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${YELLOW}–ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Saleor...${NC}"
    gcloud run jobs create saleor-migrate \
        --image gcr.io/$PROJECT_ID/saleor:latest \
        --region europe-west1 \
        --command "python,manage.py,migrate" \
        --max-retries 3 \
        --add-cloudsql-instances $(terraform output -raw database_instance)
    
    gcloud run jobs execute saleor-migrate --region europe-west1 --wait
    
    echo -e "${GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã${NC}\n"
}

# Step 8: Create admin user
create_admin() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${YELLOW}–°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...${NC}"
    echo -e "${YELLOW}Email: admin@ede-story.com${NC}"
    echo -e "${YELLOW}Password: (–±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)${NC}"
    
    # Generate password
    ADMIN_PASSWORD=$(openssl rand -base64 32)
    
    # Save to Secret Manager
    echo -n "$ADMIN_PASSWORD" | gcloud secrets create saleor-admin-password --data-file=-
    
    echo -e "${GREEN}‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Secret Manager${NC}"
    echo -e "${YELLOW}–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å: gcloud secrets versions access latest --secret=saleor-admin-password${NC}\n"
}

# Step 9: Setup monitoring
setup_monitoring() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê –®–∞–≥ 9: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã...${NC}"
    
    # Create uptime check
    gcloud monitoring uptime-checks create shop-uptime \
        --display-name="Shop Uptime Check" \
        --uri=https://shop.ede-story.com \
        --check-interval=5
    
    echo -e "${GREEN}‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}\n"
}

# Final summary
show_summary() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}    üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"
    
    echo -e "${GREEN}üìç URLs:${NC}"
    echo -e "  Frontend: $(gcloud run services describe edestory-shop --region europe-west1 --format 'value(status.url)')"
    echo -e "  API: $(gcloud run services describe saleor-api --region europe-west1 --format 'value(status.url)')"
    echo -e "  n8n: $(gcloud run services describe n8n --region europe-west1 --format 'value(status.url)')"
    
    echo -e "\n${GREEN}üìä –†–µ—Å—É—Ä—Å—ã:${NC}"
    echo -e "  Database: $(terraform output -raw database_instance)"
    echo -e "  Media Bucket: $(terraform output -raw media_bucket)"
    echo -e "  Static Bucket: $(terraform output -raw static_bucket)"
    
    echo -e "\n${GREEN}üîê Credentials:${NC}"
    echo -e "  Admin password: gcloud secrets versions access latest --secret=saleor-admin-password"
    echo -e "  n8n: admin / changeme"
    
    echo -e "\n${YELLOW}üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo -e "  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è shop.ede-story.com"
    echo -e "  2. –î–æ–±–∞–≤—å—Ç–µ Stripe production –∫–ª—é—á–∏"
    echo -e "  3. –ü–æ–ª—É—á–∏—Ç–µ AliExpress API –∫–ª—é—á–∏"
    echo -e "  4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ n8n workflows"
    
    echo -e "\n${GREEN}üí∞ –û—Ü–µ–Ω–∫–∞ –∑–∞—Ç—Ä–∞—Ç: ~$50/–º–µ—Å—è—Ü${NC}"
    echo -e "${YELLOW}üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: https://console.cloud.google.com/monitoring${NC}"
}

# Main execution
main() {
    check_prerequisites
    
    echo -e "${YELLOW}–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_ID${NC}"
    echo -e "${YELLOW}–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 15-20 –º–∏–Ω—É—Ç...${NC}\n"
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " confirm
    if [ "$confirm" != "yes" ]; then
        echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
    fi
    
    deploy_infrastructure
    build_images
    deploy_saleor
    deploy_frontend
    setup_n8n
    configure_domain
    run_migrations
    create_admin
    setup_monitoring
    show_summary
}

# Run main function
main