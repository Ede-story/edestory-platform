#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ AliExpress –≤ Saleor
 * –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π
 */

const fs = require('fs');
const path = require('path');
const https = require('https');
const crypto = require('crypto');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '..', 'frontend', '.env.local') });

class ProductImporter {
  constructor() {
    this.appKey = process.env.ALIEXPRESS_APP_KEY;
    this.appSecret = process.env.ALIEXPRESS_APP_SECRET;
    this.trackingId = process.env.ALIEXPRESS_TRACKING_ID || 'edestory';
    this.saleorUrl = process.env.NEXT_PUBLIC_SALEOR_API_URL || 'http://localhost:8000/graphql/';
    
    if (!this.appKey || !this.appSecret) {
      console.error(`${colors.red}‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env.local${colors.reset}`);
      console.log(`${colors.yellow}–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/aliexpress-test.js${colors.reset}`);
      process.exit(1);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è AliExpress API
  generateSign(params) {
    const sortedParams = Object.keys(params)
      .sort()
      .map(key => `${key}${params[key]}`)
      .join('');
    
    const signStr = this.appSecret + sortedParams + this.appSecret;
    return crypto.createHash('md5').update(signStr).digest('hex').toUpperCase();
  }

  // API –∑–∞–ø—Ä–æ—Å –∫ AliExpress
  async aliexpressRequest(method, params = {}) {
    const timestamp = new Date().toISOString();
    
    const requestParams = {
      app_key: this.appKey,
      method,
      timestamp,
      sign_method: 'md5',
      v: '2.0',
      format: 'json',
      ...params
    };

    requestParams.sign = this.generateSign(requestParams);
    const queryString = new URLSearchParams(requestParams).toString();
    
    return new Promise((resolve, reject) => {
      const options = {
        hostname: 'api-sg.aliexpress.com',
        path: `/sync?${queryString}`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      };

      const req = https.request(options, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          try {
            const json = JSON.parse(data);
            if (json.error_response) {
              reject(new Error(json.error_response.msg || 'API Error'));
            } else {
              resolve(json);
            }
          } catch (e) {
            reject(e);
          }
        });
      });

      req.on('error', reject);
      req.end();
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
  async getHotProducts(categoryId = null) {
    console.log(`${colors.cyan}üî• –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ —Ç–æ–≤–∞—Ä—ã...${colors.reset}`);
    
    const params = {
      target_currency: 'EUR',
      target_language: 'ES',
      ship_to_country: 'ES',
      page_size: 50,
      platform_product_type: 'ALL'
    };

    if (categoryId) {
      params.category_ids = categoryId;
    }

    const response = await this.aliexpressRequest('aliexpress.affiliate.hotproduct.query', params);
    return response.aliexpress_affiliate_hotproduct_query_response?.resp_result?.result?.products || [];
  }

  // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  async searchProducts(keywords, minPrice = 10, maxPrice = 500) {
    console.log(`${colors.cyan}üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã: "${keywords}"...${colors.reset}`);
    
    const params = {
      keywords: keywords,
      target_currency: 'EUR',
      target_language: 'ES',
      ship_to_country: 'ES',
      min_sale_price: minPrice,
      max_sale_price: maxPrice,
      sort: 'SALE_PRICE_ASC',
      page_size: 20,
      platform_product_type: 'ALL'
    };

    const response = await this.aliexpressRequest('aliexpress.affiliate.product.query', params);
    return response.aliexpress_affiliate_product_query_response?.resp_result?.result?.products || [];
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
  async generateAffiliateLink(productUrl) {
    const params = {
      source_values: productUrl,
      promotion_link_type: '2',
      tracking_id: this.trackingId
    };

    const response = await this.aliexpressRequest('aliexpress.affiliate.link.generate', params);
    const links = response.aliexpress_affiliate_link_generate_response?.resp_result?.result?.promotion_links;
    return links && links.length > 0 ? links[0].promotion_link : productUrl;
  }

  // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
  calculateSellingPrice(originalPrice, category) {
    let markupPercent = 30; // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ 30%
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (originalPrice < 10) {
      markupPercent = 50; // 50% –¥–ª—è –¥–µ—à–µ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    } else if (originalPrice < 30) {
      markupPercent = 40; // 40% –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
    } else if (originalPrice > 100) {
      markupPercent = 25; // 25% –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (category && category.includes('phone')) {
      markupPercent = 20; // –ú–µ–Ω—å—à–µ –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É
    } else if (category && category.includes('fashion')) {
      markupPercent = 45; // –ë–æ–ª—å—à–µ –Ω–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –æ–¥–µ–∂–¥—É
    }

    return Math.round(originalPrice * (1 + markupPercent / 100) * 100) / 100;
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞
  filterProducts(products) {
    return products.filter(product => {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
      const rating = parseFloat(product.evaluate_rate || 0);
      if (rating < 4.5) return false;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
      const orders = parseInt(product.thirty_days_commission || 0);
      if (orders < 10) return false;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–∏—Å—Å–∏–∏
      const commission = parseFloat(product.commission_rate || 0);
      if (commission < 3) return false;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (!product.product_main_image_url) return false;
      
      return true;
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ Saleor (mock –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  async createProductInSaleor(product) {
    const sellingPrice = this.calculateSellingPrice(product.target_sale_price, product.first_level_category_name);
    const affiliateLink = await this.generateAffiliateLink(product.product_detail_url);
    
    const saleorProduct = {
      name: product.product_title,
      slug: `aliexpress-${product.product_id}`,
      description: product.product_detail_url,
      price: sellingPrice,
      originalPrice: product.target_sale_price,
      currency: 'EUR',
      images: [product.product_main_image_url, product.product_small_image_urls].flat().filter(Boolean),
      category: product.first_level_category_name,
      metadata: {
        aliexpress_id: product.product_id,
        affiliate_url: affiliateLink,
        commission_rate: product.commission_rate,
        original_price: product.target_sale_price,
        shop_url: product.shop_url,
        evaluate_rate: product.evaluate_rate,
        thirty_days_volume: product.thirty_days_commission
      },
      stock: 100, // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥
      weight: 0.5, // –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å
      sku: `ALI-${product.product_id}`
    };

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π GraphQL –∑–∞–ø—Ä–æ—Å –∫ Saleor
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç
    return saleorProduct;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
  async importProducts() {
    console.clear();
    console.log(`${colors.blue}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.reset}`);
    console.log(`${colors.blue}‚ïë   ${colors.green}üì¶ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ AliExpress${colors.blue}                   ‚ïë${colors.reset}`);
    console.log(`${colors.blue}‚ïë   ${colors.yellow}shop.ede-story.com${colors.blue}                               ‚ïë${colors.reset}`);
    console.log(`${colors.blue}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}\n`);

    try {
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
      const categories = [
        { keywords: 'smartphone case', category: 'Electronics' },
        { keywords: 'women dress summer', category: 'Fashion' },
        { keywords: 'home decoration', category: 'Home' },
        { keywords: 'fitness equipment', category: 'Sports' },
        { keywords: 'kitchen gadgets', category: 'Kitchen' }
      ];

      let totalImported = 0;
      let totalProfit = 0;

      for (const cat of categories) {
        console.log(`\n${colors.magenta}‚ïê‚ïê‚ïê –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat.category} ‚ïê‚ïê‚ïê${colors.reset}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        const products = await this.searchProducts(cat.keywords);
        console.log(`${colors.cyan}–ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤${colors.reset}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        const filteredProducts = this.filterProducts(products);
        console.log(`${colors.yellow}–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤${colors.reset}`);
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const toImport = filteredProducts.slice(0, 5);
        
        for (const product of toImport) {
          const saleorProduct = await this.createProductInSaleor(product);
          
          const profit = saleorProduct.price - saleorProduct.originalPrice;
          const commission = saleorProduct.originalPrice * (product.commission_rate / 100);
          const totalProfitPerItem = profit + commission;
          
          console.log(`\n  ‚úÖ ${saleorProduct.name.substring(0, 50)}...`);
          console.log(`     üí∞ –ó–∞–∫—É–ø–∫–∞: ‚Ç¨${saleorProduct.originalPrice}`);
          console.log(`     üíµ –ü—Ä–æ–¥–∞–∂–∞: ‚Ç¨${saleorProduct.price}`);
          console.log(`     üìà –ü—Ä–∏–±—ã–ª—å: ‚Ç¨${totalProfitPerItem.toFixed(2)} (–Ω–∞—Ü–µ–Ω–∫–∞: ‚Ç¨${profit.toFixed(2)} + –∫–æ–º–∏—Å—Å–∏—è: ‚Ç¨${commission.toFixed(2)})`);
          console.log(`     üîó ${saleorProduct.metadata.affiliate_url.substring(0, 50)}...`);
          
          totalImported++;
          totalProfit += totalProfitPerItem;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
      const importResults = {
        timestamp: new Date().toISOString(),
        totalImported: totalImported,
        estimatedProfit: totalProfit.toFixed(2),
        categories: categories.map(c => c.category)
      };

      const resultsPath = path.join(__dirname, '..', 'import-results.json');
      fs.writeFileSync(resultsPath, JSON.stringify(importResults, null, 2));

      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      console.log(`\n${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}`);
      console.log(`${colors.green}üéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!${colors.reset}`);
      console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}\n`);
      
      console.log(`üìä ${colors.green}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${colors.reset}`);
      console.log(`   ‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${colors.cyan}${totalImported}${colors.reset}`);
      console.log(`   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Ç–æ–≤–∞—Ä: ${colors.cyan}‚Ç¨${(totalProfit / totalImported).toFixed(2)}${colors.reset}`);
      console.log(`   ‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (–ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –≤—Å–µ—Ö): ${colors.green}‚Ç¨${totalProfit.toFixed(2)}${colors.reset}`);
      
      console.log(`\n${colors.yellow}üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${colors.reset}`);
      console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ Saleor Dashboard: ${colors.cyan}http://localhost:8000/dashboard/${colors.reset}`);
      console.log(`2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤ n8n: ${colors.cyan}http://localhost:5678${colors.reset}`);
      console.log(`3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ checkout —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ Stripe`);
      console.log(`4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω: ${colors.cyan}cd frontend && pnpm dev${colors.reset}`);
      
      console.log(`\n${colors.green}üí° –°–æ–≤–µ—Ç:${colors.reset} –ù–∞—Å—Ç—Ä–æ–π—Ç–µ cron job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:`);
      console.log(`   ${colors.cyan}0 */4 * * * node ${__filename}${colors.reset}`);

    } catch (error) {
      console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}${colors.reset}`);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
const importer = new ProductImporter();
importer.importProducts().catch(err => {
  console.error(`${colors.red}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}${colors.reset}`);
  process.exit(1);
});